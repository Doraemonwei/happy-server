// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

//
// Account
//

model Account {
    id        String   @id @default(cuid())
    publicKey String   @unique // Required by current auth system, simplified in single-user mode
    seq       Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Profile  
    firstName String?
    lastName  String?

    Session Session[]
    Machine Machine[]
}




//
// Sessions
//

model Session {
    id                String           @id @default(cuid())
    tag               String
    accountId         String
    account           Account          @relation(fields: [accountId], references: [id])
    metadata          String
    metadataVersion   Int              @default(0)
    agentState        String?
    agentStateVersion Int              @default(0)
    seq               Int              @default(0)
    active            Boolean          @default(true)
    lastActiveAt      DateTime         @default(now())
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    messages          SessionMessage[]

    @@unique([accountId, tag])
    @@index([accountId, updatedAt(sort: Desc)])
}

model SessionMessage {
    id        String   @id @default(cuid())
    sessionId String
    session   Session  @relation(fields: [sessionId], references: [id])
    localId   String?
    seq       Int
    /// [SessionMessageContent]
    content   Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([sessionId, localId])
    @@index([sessionId, seq])
}

//
// Github
//



//
// Utility
//

model GlobalLock {
    key       String   @id @default(cuid())
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
}

model RepeatKey {
    key       String   @id
    value     String
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model SimpleCache {
    key       String   @id
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//
// Usage Reporting
//


//
// Machines
//

model Machine {
    id                 String   @id
    accountId          String
    account            Account  @relation(fields: [accountId], references: [id])
    seq                Int      @default(0)
    active             Boolean  @default(true)
    lastActiveAt       DateTime @default(now())
    metadata           String   @default("{}")  // Machine metadata (unencrypted in single-user mode)
    metadataVersion    Int      @default(0)
    daemonState        String?  // Daemon state (unencrypted in single-user mode)
    daemonStateVersion Int      @default(0)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    @@unique([accountId, id])
    @@index([accountId])
}

